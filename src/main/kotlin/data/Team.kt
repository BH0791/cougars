package fr.hamtec.data

import fr.hamtec.utils.UUIDSerializer
import kotlinx.serialization.Serializable

@Serializable
data class Team(
    //*cause probl√®me
    @Serializable(with = UUIDSerializer::class)
    val id: Int,        //*cause probl√®me
    val data: TeamData,
    val name: String,
)

@Serializable
data class TeamData(
    val name: String,
    val country: String,
)

/**
 * Explications
 * Mais pourquoi ne pas l'avoir fait que sur la class Team?
 * C‚Äôest une bonne question‚ÄØ! Annoter directement la classe
 * `Team` avec `@Serializable(with = UUIDSerializer::class)`
 * ne fonctionne pas parce que cette annotation appliquerait le serializer `UUIDSerializer` √† **toute la
 * classe** `Team`. En d'autres termes, cela signifierait que l'int√©gralit√© de l'objet `Team` serait g√©r√©
 * par ce serializer sp√©cifique, plut√¥t que seulement le champ `id`.
 *
 * Cependant, voici pourquoi √ßa ne marche pas comme vous le sugg√©rez‚ÄØ:
 * 1. **Serializeur global pour toute la classe** :
 *    L'annotation `@Serializable(with = UUIDSerializer::class)` sur la classe `Team` indiquerait que cette
 *    classe enti√®re utilise le serializeur `UUIDSerializer`, ce qui n'est pas l'intention ici. Vous voulez
 *    simplement g√©rer `id` de mani√®re personnalis√©e, tout en laissant Kotlin Serialization traiter les autres
 *    champs (`data`, par exemple) de mani√®re standard.
 *
 * 2. **Granularit√© du serializeur** :
 *    Kotlin Serialization permet d'appliquer des serializeurs √† des champs sp√©cifiques, comme vous l'avez
 *    fait avec `id`. Cela vous donne une granularit√© et une flexibilit√© pour ne pas imposer de serializeur
 *    personnalis√© √† des champs qui n'en ont pas besoin.
 *
 * 3. **Compatibilit√© des autres champs** :
 *    En annotant uniquement `id`, vous laissez Kotlin Serialization g√©rer naturellement le champ `data`
 *    (et ses sous-champs `name` et `country`). Cela √©vite des probl√®mes, car ces champs n'ont pas besoin
 *    d'un traitement sp√©cial.
 *
 * En r√©sum√©, l'annotation `@Serializable(with = UUIDSerializer::class)` ne peut pas √™tre appliqu√©e √† toute
 * la classe `Team` parce que ce serait mal interpr√©t√© par Kotlin Serialization‚ÄØ: on dirait √† la biblioth√®que
 * d'utiliser ce serializer pour la *classe enti√®re* (ce qui inclurait potentiellement tous les champs de mani√®re
 * incorrecte).
 *
 * C'est comme si vous vouliez une recette sp√©ciale uniquement pour un ingr√©dient (l'`id` dans ce cas), sans
 * changer la fa√ßon de cuisiner le reste du plat. üòÑ Vous voyez la subtilit√© ?
 */